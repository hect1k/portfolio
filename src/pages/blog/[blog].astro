---
import ScreenLayout from "@/layouts/BaseLayout.astro";
import Breadcrumbs from "@/components/Breadcrumbs.astro";
import { calculateReadingTime, formatDate } from "@/utils";
import { getCollection } from "astro:content";
import MarkdownIt from "markdown-it";
import BlogCard from "@/components/BlogCard.astro";

import recommendations from "../../recommendations.json";

const blogs = await getCollection("blog");

const topRecommendSlugs = recommendations
  .filter((rec: any) => rec.slug == Astro.params.blog)
  .map((rec: any) => rec.recommendations)
  .flat()
  .slice(0, 3);

var recommendedBlogs: any = [];

topRecommendSlugs.forEach((slug: string) => {
  var blog = blogs.find((b: any) => b.slug == slug);
  if (blog) {
    recommendedBlogs.push(blog);
  }
});

const parser = new MarkdownIt();

export async function getStaticPaths() {
  const blogs = await getCollection("blog");
  return [
    ...blogs.map((blog: any) => ({
      params: {
        blog: blog.data.draft ? "/not-found" : blog.slug,
      },
      props: {
        blog: blog,
      },
    })),
  ];
}

const { blog } = Astro.props;
---

<ScreenLayout
  title={`${blog.data.title} | Blog Post by Nnisarg Gada`}
  description={blog.data.description}
  image={`https://nnisarg.in${blog.data.image}`}
>
  <div
    class="prose md:prose-lg lg:prose-xl mx-auto w-full max-w-none p-6 md:p-8 lg:p-12"
  >
    <div class="my-4 md:my-8 lg:my-12">
      <Breadcrumbs blog={blog.data.title} />
    </div>
    <div>
      <h1 class="text-text text-3xl font-bold md:text-4xl lg:text-5xl">
        {blog.data.title}
      </h1>
      <h3 class="text-text text-lg md:text-xl">{blog.data.description}</h3>
      <div class="flex flex-wrap gap-2">
        {
          blog.data.tags
            .split(", ")
            .map((tag: string) => (
              <div class="bg-primary rounded px-2 py-1 text-sm font-bold text-white md:text-base">
                #{tag}
              </div>
            ))
        }
      </div>
      <p class="text-base md:text-lg">
        <span class="font-bold">{formatDate(blog.data.pubDate)}</span> â€¢ <span
          class="italic">{calculateReadingTime(blog.body)} min read</span
        >
      </p>
      <Fragment set:html={parser.render(blog.body)} />
    </div>
  </div>
  {
    recommendedBlogs.length > 0 && (
      <div class="flex flex-col gap-4 p-6 md:gap-8 md:p-8 lg:p-12">
        <div class="flex w-full flex-wrap items-end justify-between gap-2">
          <h2 class="text-xl font-bold md:text-2xl lg:text-3xl">
            You May Also Like
          </h2>
          <a href="/blog" title="View All Blog Posts" class="underline">
            View All
          </a>
        </div>
        <div class="flex flex-col gap-6">
          {recommendedBlogs.map(
            (blog: any) => !blog.data.draft && <BlogCard blog={blog} />,
          )}
        </div>
      </div>
    )
  }
</ScreenLayout>
