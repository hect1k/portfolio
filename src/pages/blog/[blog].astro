---
import ScreenLayout from "@layouts/Screen.astro";
import Breadcrumbs from "@components/Breadcrumbs.astro";
import { calculateReadingTime, formatDate } from "@utils";
import { getCollection } from "astro:content";
import MarkdownIt from "markdown-it";

const parser = new MarkdownIt();

export async function getStaticPaths() {
  const blogs = await getCollection("blog");
  return [
    ...blogs.map((blog: any) => ({
      params: {
        blog: blog.data.draft ? "/not-found" : blog.slug,
      },
      props: {
        blog: blog,
      },
    })),
  ];
}

const { blog } = Astro.props;
---

<ScreenLayout title={`${blog.data.title} | Blog by Nnisarg Gada`}>
  <div class="scroll-watcher fixed z-20 top-20 left-0 h-1 bg-accent"></div>
  <div
    class="fade w-full max-w-none p-6 md:p-8 lg:p-12 mx-auto prose md:prose-lg lg:prose-xl"
  >
    <div class="my-4 md:my-8 lg:my-12">
      <Breadcrumbs blog={blog.data.title} />
    </div>
    <div class="blog-content">
      <h1 class="text-5xl font-bold">{blog.data.title}</h1>
      <h3 class="text-xl">{blog.data.description}</h3>
      <div class="flex flex-wrap gap-2">
        {
          blog.data.tags
            .split(", ")
            .map((tag: string) => (
              <div class="font-bold text-sm bg-accent px-2 py-1 rounded">
                #{tag}
              </div>
            ))
        }
      </div>
      <p>
        <span class="font-bold">{formatDate(blog.data.pubDate)}</span> â€¢ <span
          class="italic">{calculateReadingTime(blog.body)} min read</span
        >
      </p>
      <Fragment set:html={parser.render(blog.body)} />
    </div>
  </div>
</ScreenLayout>

<style>
  .scroll-watcher {
    --width: 0;
    width: var(--width);
  }
</style>

<script>
  import { gsap } from "gsap";
  import { ScrollTrigger } from "gsap/ScrollTrigger";

  gsap.registerPlugin(ScrollTrigger);

  const blogElements = gsap.utils.toArray(".blog-content > *");

  blogElements.forEach((element) => {
    // @ts-ignore
    gsap.from(element, {
      y: 100,
      duration: 0.3,
      ease: "sine",
      scrollTrigger: {
        trigger: element,
        start: "top 105%",
        toggleActions: "play none none reverse",
      },
    });
  });

  function updateScrollWatcher() {
    const { scrollTop, scrollHeight } = document.documentElement;
    const scrollPercent = `${(scrollTop / (scrollHeight - window.innerHeight)) * 100}%`;
    const scrollWatcher = document.querySelector(
      ".scroll-watcher",
    ) as HTMLDivElement;

    scrollWatcher.style.setProperty("--width", scrollPercent);
  }

  window.addEventListener("scroll", updateScrollWatcher);
  window.addEventListener("scroll", updateScrollWatcher);
</script>
